# Copyright (c) 2021 Teslabs Engineering S.L.
# SPDX-License-Identifier: Apache-2.0

description: |
    The AT32 pin controller (MUX model) is a singleton node responsible for
    controlling pin function selection and pin properties. For example, you can
    use this node to route USART1 RX to pin PA10 and enable the pull-up resistor
    on the pin.

    The node has the 'pinctrl' node label set in your SoC's devicetree,
    so you can modify it like this:

      &pinctrl {
              /* your modifications go here */
      };

    All device pin configurations should be placed in child nodes of the
    'pinctrl' node, as shown in this example:

      /* You can put this in places like a board-pinctrl.dtsi file in
       * your board directory, or a devicetree overlay in your application.
       */

      /* include pre-defined combinations for the SoC variant used by the board */
      #include <dt-bindings/pinctrl/at32f405r(c-g-m)xx-pinctrl.h>

      &pinctrl {
        /* configuration for the usart1 "default" state */
        usart1_default: usart1_default {
          /* group 1 */
          group1 {
            /* configure PA9 as USART1 TX and PA11 as USART1 CTS */
            pinmux = <USART1_TX_PA9>, <USART1_CTS_PA11>;
          };
          /* group 2 */
          group2 {
            /* configure PA10 as USART1 RX and PA12 as USART1 RTS */
            pinmux = <USART1_RX_PA10>, <USART1_RTS_PA12>;
            /* both PA10 and PA12 have pull-up enabled */
            bias-pull-up;
          };

    The 'usart1_default' child node encodes the pin configurations for a
    particular state of a device; in this case, the default (that is, active)
    state. Similarly, 'usart1_sleep' child node encodes the pin configurations
    for the sleep state (used in device low power mode). Note that analog mode
    is used for low power states because it disconnects the pin pull-up/down
    resistor, schmitt trigger, and output buffer.
    As shown, pin configurations are organized in groups within each child node.
    Each group can specify a list of pin function selections in the 'pinmux'
    property.

    A group can also specify shared pin properties common to all the specified
    pins, such as the 'bias-pull-up' property in group 2. Here is a list of
    supported standard pin properties:

    - drive-push-pull: Push-pull drive mode (default, not required).
    - drive-open-drain: Open-drain drive mode.
    - bias-disable: Disable pull-up/down (default, not required).
    - bias-pull-up: Enable pull-up resistor.
    - bias-pull-down: Enable pull-down resistor.
    - slew-rate: Set the maximum speed (and so the slew-rate) of the output
      signal (default: 2MHz).

    Note that drive and bias options are mutually exclusive.

    To link pin configurations with a device, use a pinctrl-N property for some
    number N, like this example you could place in your board's DTS file:

       #include "board-pinctrl.dtsi"

       &usart1 {
             pinctrl-0 = <&usart1_default>;
             pinctrl-1 = <&usart1_sleep>;
             pinctrl-names = "default", "sleep";
       };

compatible: "artery,at32-pinctrl-mux"

include: artery,at32-pinctrl-common.yaml

child-binding:
  description: |
    Each child node defines the configuration for a particular state.
  child-binding:
    description: |
      The grandchild nodes group pins that share the same pin configuration.
    properties:
      slew-rate:
        type: string
        default: "max-speed-2mhz"
        enum:
          - "max-speed-2mhz"
          - "max-speed-25mhz"
          - "max-speed-50mhz"
          - "max-speed-200mhz"
        description: |
          Set the maximum speed of a pin. This setting effectively limits the
          slew rate of the output signal. Defaults to "max-speed-2mhz", the SoC
          default.
