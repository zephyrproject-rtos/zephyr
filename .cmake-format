_help_parse: Options affecting listfile parsing
parse:
  _help_additional_commands:
  - Specify structure for custom cmake functions
  additional_commands:
    zephyr_sources:
      pargs:
        nargs: 0
    zephyr_include_directories:
      pargs:
        nargs: 0
    zephyr_system_include_directories:
      pargs:
        nargs: 0
    zephyr_compile_definitions:
      pargs:
        nargs: 0
    zephyr_compile_options:
      pargs:
        nargs: 0
    zephyr_link_libraries:
      pargs:
        nargs: 0
    zephyr_libc_link_libraries:
      pargs:
        nargs: 0
    zephyr_cc_option:
      pargs:
        nargs: 0
    zephyr_cc_option_fallback:
      pargs:
        nargs: 2
    zephyr_ld_options:
      pargs:
        nargs: 0
    zephyr_get_include_directories_for_lang_as_string:
      pargs:
        nargs: 2
    zephyr_get_system_include_directories_for_lang_as_string:
      pargs:
        nargs: 2
    zephyr_get_compile_definitions_for_lang_as_string:
      pargs:
        nargs: 2
    zephyr_get_compile_options_for_lang_as_string:
      pargs:
        nargs: 2
    zephyr_get_include_directories_for_lang:
      pargs:
        nargs: 2
    zephyr_get_system_include_directories_for_lang:
      pargs:
        nargs: 2
    zephyr_get_compile_definitions_for_lang:
      pargs:
        nargs: 2
    zephyr_get_compile_options_for_lang:
      pargs:
        nargs: 2
    zephyr_get_parse_args:
      pargs:
        nargs: 1
    process_flags:
      pargs:
        nargs: 3
    convert_list_of_flags_to_string_of_flags:
      pargs:
        nargs: 2
    get_property_and_add_prefix:
      pargs:
        nargs: 4
    zephyr_library:
      pargs:
        nargs: 0
    zephyr_library_get_current_dir_lib_name:
      pargs:
        nargs: 2
    zephyr_library_named:
      pargs:
        nargs: 1
    zephyr_library_amend:
      pargs:
        nargs: 0
    zephyr_link_interface:
      pargs:
        nargs: 1
    zephyr_library_sources:
      pargs:
        nargs: 1
    zephyr_library_include_directories:
      pargs:
        nargs: 0
    zephyr_library_link_libraries:
      pargs:
        nargs: 1
    zephyr_library_compile_definitions:
      pargs:
        nargs: 1
    zephyr_library_compile_options:
      pargs:
        nargs: 1
    zephyr_library_cc_option:
      pargs:
        nargs: 0
    zephyr_library_add_dependencies:
      pargs:
        nargs: 0
    zephyr_append_cmake_library:
      pargs:
        nargs: 1
    zephyr_library_import:
      pargs:
        nargs: 2
    zephyr_library_app_memory:
      pargs:
        nargs: 1
    zephyr_library_property:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        ALLOW_EMPTY: 1
    zephyr_interface_library_named:
      pargs:
        nargs: 1
    generate_inc_file:
      pargs:
        nargs: 2
    generate_inc_file_for_gen_target:
      pargs:
        nargs: 4
    generate_inc_file_for_target:
      pargs:
        nargs: 3
    board_set_runner:
      pargs:
        nargs: 2
    board_set_runner_ifnset:
      pargs:
        nargs: 2
    board_set_flasher:
      pargs:
        nargs: 1
    board_set_debugger:
      pargs:
        nargs: 1
    board_set_flasher_ifnset:
      pargs:
        nargs: 1
    board_set_debugger_ifnset:
      pargs:
        nargs: 1
    board_set_robot_runner_ifnset:
      pargs:
        nargs: 1
    board_set_sim_runner_ifnset:
      pargs:
        nargs: 1
    board_runner_args:
      pargs:
        nargs: 1
    board_finalize_runner_args:
      pargs:
        nargs: 1
    board_set_rimage_target:
      pargs:
        nargs: 1
    board_emu_args:
      pargs:
        nargs: 1
    board_finalize_emu_args:
      pargs:
        nargs: 1
    board_check_revision:
      pargs:
        nargs: '*'
        flags:
        - OPTIONAL
        - EXACT
      kwargs:
        FORMAT: 1
        DEFAULT_REVISION: 1
        HIGHEST_REVISION: 1
        VALID_REVISIONS: +
    zephyr_check_compiler_flag:
      pargs:
        nargs: 3
    zephyr_check_compiler_flag_hardcoded:
      pargs:
        nargs: 4
    zephyr_linker_sources:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        SORT_KEY: 1
    zephyr_code_relocate_ifdef:
      pargs:
        nargs: 1
    zephyr_code_relocate:
      pargs:
        nargs: '*'
        flags:
        - NOCOPY
        - NOKEEP
      kwargs:
        LIBRARY: 1
        LOCATION: 1
        PHDR: 1
        FILES: +
    check_dtc_flag:
      pargs:
        nargs: 2
    pow2round:
      pargs:
        nargs: 1
    zephyr_build_string:
      pargs:
        nargs: 1+
        flags:
        - MERGE
        - REVERSE
      kwargs:
        BOARD: 1
        BOARD_QUALIFIERS: 1
        BOARD_REVISION: 1
        BUILD: 1
        SHORT: 1
    zephyr_syscall_include_directories:
      pargs:
        nargs: 0
    zephyr_syscall_header:
      pargs:
        nargs: 0
    zephyr_syscall_header_ifdef:
      pargs:
        nargs: 1
    zephyr_blobs_verify:
      pargs:
        nargs: '*'
        flags:
        - REQUIRED
      kwargs:
        MODULE: 1
        FILES: +
    import_kconfig:
      pargs:
        nargs: 2+
        flags: []
      kwargs:
        TARGET: 1
    add_subdirectory_ifdef:
      pargs:
        nargs: 2
    target_sources_ifdef:
      pargs:
        nargs: 4
    target_compile_definitions_ifdef:
      pargs:
        nargs: 4
    target_include_directories_ifdef:
      pargs:
        nargs: 4
    target_link_libraries_ifdef:
      pargs:
        nargs: 3
    add_compile_option_ifdef:
      pargs:
        nargs: 2
    target_compile_option_ifdef:
      pargs:
        nargs: 4
    target_cc_option_ifdef:
      pargs:
        nargs: 4
    zephyr_library_sources_ifdef:
      pargs:
        nargs: 2
    zephyr_sources_ifdef:
      pargs:
        nargs: 1
    zephyr_cc_option_ifdef:
      pargs:
        nargs: 1
    zephyr_ld_option_ifdef:
      pargs:
        nargs: 1
    zephyr_link_libraries_ifdef:
      pargs:
        nargs: 1
    zephyr_compile_options_ifdef:
      pargs:
        nargs: 1
    zephyr_compile_definitions_ifdef:
      pargs:
        nargs: 1
    zephyr_include_directories_ifdef:
      pargs:
        nargs: 1
    zephyr_library_compile_definitions_ifdef:
      pargs:
        nargs: 2
    zephyr_library_include_directories_ifdef:
      pargs:
        nargs: 1
    zephyr_library_compile_options_ifdef:
      pargs:
        nargs: 2
    zephyr_link_interface_ifdef:
      pargs:
        nargs: 2
    zephyr_library_link_libraries_ifdef:
      pargs:
        nargs: 2
    zephyr_linker_sources_ifdef:
      pargs:
        nargs: 1
    zephyr_library_add_dependencies_ifdef:
      pargs:
        nargs: 1
    list_append_ifdef:
      pargs:
        nargs: 2
    set_ifndef:
      pargs:
        nargs: 2
    add_subdirectory_ifndef:
      pargs:
        nargs: 2
    target_sources_ifndef:
      pargs:
        nargs: 4
    target_compile_definitions_ifndef:
      pargs:
        nargs: 4
    target_include_directories_ifndef:
      pargs:
        nargs: 4
    target_link_libraries_ifndef:
      pargs:
        nargs: 3
    add_compile_option_ifndef:
      pargs:
        nargs: 2
    target_compile_option_ifndef:
      pargs:
        nargs: 4
    target_cc_option_ifndef:
      pargs:
        nargs: 4
    zephyr_library_sources_ifndef:
      pargs:
        nargs: 2
    zephyr_sources_ifndef:
      pargs:
        nargs: 1
    zephyr_cc_option_ifndef:
      pargs:
        nargs: 1
    zephyr_ld_option_ifndef:
      pargs:
        nargs: 1
    zephyr_link_libraries_ifndef:
      pargs:
        nargs: 1
    zephyr_compile_options_ifndef:
      pargs:
        nargs: 1
    zephyr_compile_definitions_ifndef:
      pargs:
        nargs: 1
    zephyr_include_directories_ifndef:
      pargs:
        nargs: 1
    zephyr_library_compile_definitions_ifndef:
      pargs:
        nargs: 2
    zephyr_library_include_directories_ifndef:
      pargs:
        nargs: 1
    zephyr_library_compile_options_ifndef:
      pargs:
        nargs: 2
    zephyr_link_interface_ifndef:
      pargs:
        nargs: 2
    zephyr_library_link_libraries_ifndef:
      pargs:
        nargs: 2
    zephyr_linker_sources_ifndef:
      pargs:
        nargs: 1
    zephyr_library_add_dependencies_ifndef:
      pargs:
        nargs: 1
    list_append_ifndef:
      pargs:
        nargs: 2
    check_compiler_flag:
      pargs:
        nargs: 3
    target_cc_option:
      pargs:
        nargs: 3
    target_cc_option_fallback:
      pargs:
        nargs: 4
    target_ld_options:
      pargs:
        nargs: 2
    toolchain_parse_make_rule:
      pargs:
        nargs: 2
    set_linker_property:
      pargs:
        nargs: '*'
        flags:
        - APPEND
        - NO_CREATE
      kwargs:
        TARGET: 1
        PROPERTY: +
    check_set_linker_property:
      pargs:
        nargs: '*'
        flags:
        - APPEND
      kwargs:
        TARGET: 1
        PROPERTY: +
    set_compiler_property:
      pargs:
        nargs: '*'
        flags:
        - APPEND
      kwargs:
        PROPERTY: +
    check_set_compiler_property:
      pargs:
        nargs: '*'
        flags:
        - APPEND
      kwargs:
        PROPERTY: +
    print:
      pargs:
        nargs: 1
    assert:
      pargs:
        nargs: 2
    assert_not:
      pargs:
        nargs: 2
    assert_exists:
      pargs:
        nargs: 1
    generate_unique_target_name_from_filename:
      pargs:
        nargs: 2
    zephyr_file:
      pargs:
        nargs: '*'
        flags: []
      kwargs: {}
    zephyr_file_copy:
      pargs:
        nargs: 2+
        flags:
        - ONLY_IF_DIFFERENT
      kwargs: {}
    zephyr_file_suffix:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        SUFFIX: 1
    zephyr_string:
      pargs:
        nargs: '*'
        flags:
        - SANITIZE
        - TOUPPER
      kwargs: {}
    zephyr_list:
      pargs:
        nargs: 3+
        flags: []
      kwargs:
        OUTPUT_VARIABLE: 1
    zephyr_var_name:
      pargs:
        nargs: 3
    zephyr_get:
      pargs:
        nargs: 1+
        flags:
        - MERGE
        - REVERSE
      kwargs:
        SYSBUILD: 1
        VAR: +
    zephyr_create_scope:
      pargs:
        nargs: 1
    zephyr_set:
      pargs:
        nargs: 1
    zephyr_check_cache:
      pargs:
        nargs: 1+
        flags:
        - REQUIRED
        - WATCH
      kwargs: {}
    zephyr_boilerplate_watch:
      pargs:
        nargs: 1
    zephyr_variable_set_too_late:
      pargs:
        nargs: 4
    zephyr_get_targets:
      pargs:
        nargs: 3
    test_sysbuild:
      pargs:
        nargs: '*'
        flags:
        - REQUIRED
      kwargs: {}
    target_byproducts:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        TARGET: 1
        BYPRODUCTS: +
    topological_sort:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        RESULT: 1
        PROPERTY_NAME: 1
        TARGETS: +
    build_info:
      pargs:
        nargs: 0
    dt_nodelabel:
      pargs:
        nargs: 1+
        flags:
        - REQUIRED
      kwargs:
        NODELABEL: 1
    dt_alias:
      pargs:
        nargs: 1+
        flags:
        - REQUIRED
      kwargs:
        PROPERTY: 1
    dt_node_exists:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        PATH: 1
    dt_node_has_status:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        PATH: 1
        STATUS: 1
    dt_prop:
      pargs:
        nargs: 1+
        flags:
        - REQUIRED
      kwargs:
        PATH: 1
        PROPERTY: 1
        INDEX: 1
    dt_comp_path:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        COMPATIBLE: 1
        INDEX: 1
    dt_num_regs:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        PATH: 1
    dt_reg_addr:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        PATH: 1
        INDEX: 1
        NAME: 1
    dt_reg_size:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        PATH: 1
        INDEX: 1
        NAME: 1
    dt_reg_index_private:
      pargs:
        nargs: 3
    dt_has_chosen:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        PROPERTY: 1
    dt_chosen:
      pargs:
        nargs: 1+
        flags: []
      kwargs:
        PROPERTY: 1
    dt_path_internal:
      pargs:
        nargs: 2
    dt_path_internal_exists:
      pargs:
        nargs: 2
    target_sources_if_dt_node:
      pargs:
        nargs: 4
    zephyr_dt_preprocess:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        OUT_FILE: 1
        DEPS_FILE: 1
        WORKING_DIRECTORY: 1
        CPP: +
        SOURCE_FILES: +
        EXTRA_CPPFLAGS: +
        INCLUDE_DIRECTORIES: +
    zephyr_linker:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        ENTRY: 1
        FORMAT: 1
    zephyr_linker_memory:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        NAME: 1
        SIZE: 1
        START: 1
        FLAGS: 1
    zephyr_linker_memory_ifdef:
      pargs:
        nargs: 1
    zephyr_linker_dts_section:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        PATH: 1
    zephyr_linker_dts_memory:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        CHOSEN: 1
        PATH: 1
        NODELABEL: 1
    zephyr_linker_group:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        NAME: 1
        GROUP: 1
        LMA: 1
        SYMBOL: 1
        VMA: 1
    zephyr_linker_section:
      pargs:
        nargs: '*'
        flags:
        - ALIGN_WITH_INPUT
        - HIDDEN
        - NOINIT
        - NOINPUT
      kwargs:
        ADDRESS: 1
        ALIGN: 1
        ENDALIGN: 1
        GROUP: 1
        KVMA: 1
        LMA: 1
        NAME: 1
        SUBALIGN: 1
        TYPE: 1
        VMA: 1
        PASS: +
    zephyr_linker_section_ifdef:
      pargs:
        nargs: 1
    zephyr_iterable_section:
      pargs:
        nargs: '*'
        flags:
        - ALIGN_WITH_INPUT
        - NUMERIC
      kwargs:
        GROUP: 1
        LMA: 1
        NAME: 1
        SUBALIGN: 1
        VMA: 1
    zephyr_linker_section_obj_level:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        SECTION: 1
        LEVEL: 1
    zephyr_linker_section_configure:
      pargs:
        nargs: '*'
        flags:
        - ANY
        - FIRST
        - KEEP
      kwargs:
        ALIGN: 1
        OFFSET: 1
        PRIO: 1
        SECTION: 1
        SORT: 1
        FLAGS: +
        INPUT: +
        PASS: +
        SYMBOLS: +
    zephyr_linker_symbol:
      pargs:
        nargs: '*'
        flags: []
      kwargs:
        EXPR: 1
        SYMBOL: 1
    zephyr_linker_arg_val_list:
      pargs:
        nargs: 2
    zephyr_check_arguments_required:
      pargs:
        nargs: 2
    zephyr_check_arguments_required_allow_empty:
      pargs:
        nargs: 2
    zephyr_check_flags_required:
      pargs:
        nargs: 2
    zephyr_check_arguments_required_all:
      pargs:
        nargs: 2
    zephyr_check_arguments_exclusive:
      pargs:
        nargs: 2
    zephyr_check_flags_exclusive:
      pargs:
        nargs: 2
    llext_compile_definitions:
      pargs:
        nargs: 1
    llext_compile_features:
      pargs:
        nargs: 1
    llext_compile_options:
      pargs:
        nargs: 1
    llext_include_directories:
      pargs:
        nargs: 1
    llext_link_options:
      pargs:
        nargs: 1
    add_llext_target:
      pargs:
        nargs: 1+
        flags:
        - '1'
      kwargs:
        LLEXT: 1
    add_llext_command:
      pargs:
        nargs: '*'
        flags:
        - '0'
      kwargs:
        LLEXT: 1
        PRE_BUILD: +
        POST_BUILD: +
        POST_PKG: +
    llext_filter_zephyr_flags:
      pargs:
        nargs: 3
    add_custom_target:
      pargs:
        nargs: 0
    set_target_properties:
      pargs:
        nargs: 0
    find_package:
      always_wrap: 1
      flags:
      - QUIET
      - NO_POLICY_SCOPE
      - NO_CMAKE_PATH
      - NO_CMAKE_ENVIRONMENT_PATH
      - NO_SYSTEM_ENVIRONMENT_PATH
      - NO_CMAKE_PACKAGE_REGISTRY
      - NO_CMAKE_SYSTEM_PATH
      - NO_CMAKE_SYSTEM_PACKAGE_REGISTRY
      kwargs:
        NAMES: '*'
        PATHS: '*'
  _help_override_spec:
  - Override configurations per-command where available
  override_spec: {}
#    '.find_package':
#      flags:
#      - QUIET
#      - NO_POLICY_SCOPE
#      - NO_CMAKE_PATH
#      - NO_CMAKE_ENVIRONMENT_PATH
#      - NO_SYSTEM_ENVIRONMENT_PATH
#      - NO_CMAKE_PACKAGE_REGISTRY
#      - NO_CMAKE_SYSTEM_PATH
#      - NO_CMAKE_SYSTEM_PACKAGE_REGISTRY
#      kwargs:
#        NAMES: '*'
#        PATHS: '*'
  _help_vartags:
  - Specify variable tags.
  vartags: []
  _help_proptags:
  - Specify property tags.
  proptags: []
_help_format: Options affecting formatting.
format:
  _help_disable:
  - Disable formatting entirely, making cmake-format a no-op
  disable: false
  _help_line_width:
  - How wide to allow formatted cmake files
  line_width: 100
  _help_tab_size:
  - How many spaces to tab for indent
  tab_size: 2
  _help_use_tabchars:
  - If true, lines are indented using tab characters (utf-8
  - 0x09) instead of <tab_size> space characters (utf-8 0x20).
  - In cases where the layout would require a fractional tab
  - character, the behavior of the  fractional indentation is
  - governed by <fractional_tab_policy>
  use_tabchars: false
  _help_fractional_tab_policy:
  - If <use_tabchars> is True, then the value of this variable
  - indicates how fractional indentions are handled during
  - whitespace replacement. If set to 'use-space', fractional
  - indentation is left as spaces (utf-8 0x20). If set to
  - '`round-up` fractional indentation is replaced with a single'
  - tab character (utf-8 0x09) effectively shifting the column
  - to the next tabstop
  fractional_tab_policy: use-space
  _help_max_subgroups_hwrap:
  - If an argument group contains more than this many sub-groups
  - (parg or kwarg groups) then force it to a vertical layout.
  max_subgroups_hwrap: 4
  _help_max_pargs_hwrap:
  - If a positional argument group contains more than this many
  - arguments, then force it to a vertical layout.
  max_pargs_hwrap: 8
  _help_max_rows_cmdline:
  - If a cmdline positional group consumes more than this many
  - lines without nesting, then invalidate the layout (and nest)
  max_rows_cmdline: 4
  _help_separate_ctrl_name_with_space:
  - If true, separate flow control names from their parentheses
  - with a space
  separate_ctrl_name_with_space: false
  _help_separate_fn_name_with_space:
  - If true, separate function names from parentheses with a
  - space
  separate_fn_name_with_space: false
  _help_dangle_parens:
  - If a statement is wrapped to more than one line, than dangle
  - the closing parenthesis on its own line.
  dangle_parens: true
  _help_dangle_align:
  - If the trailing parenthesis must be 'dangled' on its on
  - 'line, then align it to this reference: `prefix`: the start'
  - 'of the statement,  `prefix-indent`: the start of the'
  - 'statement, plus one indentation  level, `child`: align to'
  - the column of the arguments
  dangle_align: prefix
  _help_min_prefix_chars:
  - If the statement spelling length (including space and
  - parenthesis) is smaller than this amount, then force reject
  - nested layouts.
  min_prefix_chars: 4
  _help_max_prefix_chars:
  - If the statement spelling length (including space and
  - parenthesis) is larger than the tab width by more than this
  - amount, then force reject un-nested layouts.
  max_prefix_chars: 10
  _help_max_lines_hwrap:
  - If a candidate layout is wrapped horizontally but it exceeds
  - this many lines, then reject the layout.
  max_lines_hwrap: 4
  _help_line_ending:
  - What style line endings to use in the output.
  line_ending: unix
  _help_command_case:
  - Format command names consistently as 'lower' or 'upper' case
  command_case: canonical
  _help_keyword_case:
  - Format keywords consistently as 'lower' or 'upper' case
  keyword_case: unchanged
  _help_always_wrap:
  - A list of command names which should always be wrapped
  always_wrap: []
  _help_enable_sort:
  - If true, the argument lists which are known to be sortable
  - will be sorted lexicographicall
  enable_sort: true
  _help_autosort:
  - If true, the parsers may infer whether or not an argument
  - list is sortable (without annotation).
  autosort: false
  _help_require_valid_layout:
  - By default, if cmake-format cannot successfully fit
  - everything into the desired linewidth it will apply the
  - last, most agressive attempt that it made. If this flag is
  - True, however, cmake-format will print error, exit with non-
  - zero status code, and write-out nothing
  require_valid_layout: false
  _help_layout_passes:
  - A dictionary mapping layout nodes to a list of wrap
  - decisions. See the documentation for more information.
  layout_passes:
    StatementNode:
    - !!python/tuple
      - 0
      - false
    ArgGroupNode:
    - !!python/tuple
      - 0
      - false
    KWargGroupNode:
    - !!python/tuple
      - 0
      - false
    PargGroupNode:
    - !!python/tuple
      - 0
      - false
    ParenGroupNode:
    - !!python/tuple
      - 0
      - false
_help_markup: Options affecting comment reflow and formatting.
markup:
  _help_bullet_char:
  - What character to use for bulleted lists
  bullet_char: '*'
  _help_enum_char:
  - What character to use as punctuation after numerals in an
  - enumerated list
  enum_char: .
  _help_first_comment_is_literal:
  - If comment markup is enabled, don't reflow the first comment
  - block in each listfile. Use this to preserve formatting of
  - your copyright/license statements.
  first_comment_is_literal: false
  _help_literal_comment_pattern:
  - If comment markup is enabled, don't reflow any comment block
  - which matches this (regex) pattern. Default is `None`
  - (disabled).
  literal_comment_pattern: null
  _help_fence_pattern:
  - Regular expression to match preformat fences in comments
  - default= ``r'^\s*([`~]{3}[`~]*)(.*)$'``
  fence_pattern: ^\s*([`~]{3}[`~]*)(.*)$
  _help_ruler_pattern:
  - Regular expression to match rulers in comments default=
  - '``r''^\s*[^\w\s]{3}.*[^\w\s]{3}$''``'
  ruler_pattern: ^\s*[^\w\s]{3}.*[^\w\s]{3}$
  _help_explicit_trailing_pattern:
  - If a comment line matches starts with this pattern then it
  - is explicitly a trailing comment for the preceeding
  - argument. Default is '#<'
  explicit_trailing_pattern: '#<'
  _help_hashruler_min_length:
  - If a comment line starts with at least this many consecutive
  - hash characters, then don't lstrip() them off. This allows
  - for lazy hash rulers where the first hash char is not
  - separated by space
  hashruler_min_length: 10
  _help_canonicalize_hashrulers:
  - If true, then insert a space between the first hash char and
  - remaining hash chars in a hash ruler, and normalize its
  - length to fill the column
  canonicalize_hashrulers: true
  _help_enable_markup:
  - enable comment markup parsing and reflow
  enable_markup: false
_help_lint: Options affecting the linter
lint:
  _help_disabled_codes:
  - a list of lint codes to disable fuck
  disabled_codes:
    - C0113
    - C0111
    - R0912
    - R0915
    - W0106
    - E1126
    - E1120
  _help_function_pattern:
  - regular expression pattern describing valid function names
  function_pattern: '[0-9a-z_]+'
  _help_macro_pattern:
  - regular expression pattern describing valid macro names
  macro_pattern: '[0-9a-z_]+'
  _help_global_var_pattern:
  - regular expression pattern describing valid names for
  - variables with global (cache) scope
  global_var_pattern: '[A-Z][0-9A-Z_]+'
  _help_internal_var_pattern:
  - regular expression pattern describing valid names for
  - variables with global scope (but internal semantic)
  internal_var_pattern: _[A-Z][0-9A-Z_]+
  _help_local_var_pattern:
  - regular expression pattern describing valid names for
  - variables with local scope
  local_var_pattern: '[a-z][a-z0-9_]+'
  _help_private_var_pattern:
  - regular expression pattern describing valid names for
  - privatedirectory variables
  private_var_pattern: _[0-9a-z_]+
  _help_public_var_pattern:
  - regular expression pattern describing valid names for public
  - directory variables
  public_var_pattern: '[A-Z][0-9A-Z_]+'
  _help_argument_var_pattern:
  - regular expression pattern describing valid names for
  - function/macro arguments and loop variables.
  argument_var_pattern: '[a-z][a-z0-9_]+'
  _help_keyword_pattern:
  - regular expression pattern describing valid names for
  - keywords used in functions or macros
  keyword_pattern: '[A-Z][0-9A-Z_]+'
  _help_max_conditionals_custom_parser:
  - In the heuristic for C0201, how many conditionals to match
  - within a loop in before considering the loop a parser.
  max_conditionals_custom_parser: 2
  _help_min_statement_spacing:
  - Require at least this many newlines between statements
  min_statement_spacing: 1
  _help_max_statement_spacing:
  - Require no more than this many newlines between statements
  max_statement_spacing: 2
  max_returns: 6
  max_branches: 12
  max_arguments: 5
  max_localvars: 15
  max_statements: 50
_help_encode: Options affecting file encoding
encode:
  _help_emit_byteorder_mark:
  - If true, emit the unicode byte-order mark (BOM) at the start
  - of the file
  emit_byteorder_mark: false
  _help_input_encoding:
  - Specify the encoding of the input file. Defaults to utf-8
  input_encoding: utf-8
  _help_output_encoding:
  - Specify the encoding of the output file. Defaults to utf-8.
  - Note that cmake only claims to support utf-8 so be careful
  - when using anything else
  output_encoding: utf-8
_help_misc: Miscellaneous configurations options.
misc:
  _help_per_command:
  - A dictionary containing any per-command configuration
  - overrides. Currently only `command_case` is supported.
  per_command: {}
