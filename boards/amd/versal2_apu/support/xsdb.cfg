# Copyright (c) 2025 Advanced Micro Devices, Inc.
#
# SPDX-License-Identifier: Apache-2.0

proc cluster0_core0_rst { {mem "default"} } {
	targets -set -filter {name =~ "Versal Gen 2*"}

	mwr -force 0xEC20001C 0x0
	# write bootloop
	if {$mem eq "default"} {
		mwr -force 0xbbf00000 0x14000000
	}
	#cluster_0_config_0
	mwr -force 0xecc00020 0x0
	#cluster_0_pstate
	mwr -force 0xecb18008 0x48
	#cluster_0_preq
	mwr -force 0xecb18004 0x1
	after 400
	mwr -force 0xecb18004 0x0
	# enable lpd debug clock
	set clock_mask [expr 0x1 << 25]
	mask_write 0xEB5E017C [expr 0x1 << 25] [expr 0x1 << 25]
	# clear lpd debug reset
	mask_write 0xEB5E0398 0x1 0x0
	# clear fpd reset
	mask_write 0xEB5E03D0 0x3 0x0
	# assert core reset apu0_rst
	mask_write 0xEc200300 0x11 0x11
	# enable clock apu_cluster_0_clk
	mask_write 0xEC20010c [expr 0x1 << 25] [expr 0x1 << 25]
	# enable clock cluster 1
	mask_write 0xEC200110 [expr 0x1 << 25] [expr 0x1 << 25]
	#enable clock cluster 2
	mask_write 0xEC200114 [expr 0x1 << 25] [expr 0x1 << 25]
	#enable clock cluster 3
	mask_write 0xEC200118 [expr 0x1 << 25] [expr 0x1 << 25]
	# clear fpd coresight reset
	mwr -force 0xEC200310 0x0
	# clear cluster warm and cold resets of cluster 0
	mask_write 0xEC200300 [expr 0x1 << 8] 0
	mask_write 0xEC200300 [expr 0x1 << 9] 0
	# enable reset catch coresignt reg
	mask_write 0xF0D40024 0x7 0x7
	set addr 0xbbf00000
	mwr -force 0xecc00040 0xbbf00000
	if {$mem eq "ddr"} {
		set addr 0x0
	}
	mwr -force 0xecc00040 $addr

	# de-assert core 0 reset
	mask_write 0xec200300 0x11 0x0

	#core0_pstate
	mwr -force 0xecb10008 0x8
	#core0_preq
	mwr -force 0xecb10004 0x1
	after 400
	mwr -force 0xecb10004 0x0

	# disable reset catch
	mask_write 0xF0D40024 0x7 0x0

	targets -set -filter {name =~ "Cortex-A78AE*0.0"}
	after 400
	stop
	after 1000
	ta
}

proc load_image args  {
	set elf_file [lindex $args 0]
	set pdi_file [lindex $args 1]
	set bl31_file [lindex $args 2]
	set dtb_file [lindex $args 3]

	if { [info exists ::env(HW_SERVER_URL)] } {
		connect -url $::env(HW_SERVER_URL)
	} else {
		connect
	}

	device program $pdi_file

	if { [info exists ::env(HW_SERVER_URL)] } {
		set hw_server_url [split $::env(HW_SERVER_URL) ":"]
		set host [lindex $hw_server_url 0]
		set port [lindex $hw_server_url 1]
		disconnect
		after 2000
		connect -host $host -port $port
		after 3000
		ta
	}
	after 1000
	targets -set -nocase -filter {name =~ "Versal Gen 2*"}
	after 100
	cluster0_core0_rst
	after 100
	dow -data -force $dtb_file 0x1000000
	dow -force $elf_file
	dow -force $bl31_file
	con
	exit
}

load_image {*}$argv
